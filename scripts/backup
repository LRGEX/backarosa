#!/bin/bash
source /opt/backarosa/container_start # this is needed to run container_start function
source /opt/backarosa/container_stop # this is needed to run container_stop function
#==========================================================
#======================= MEGA SECTION =====================
#==========================================================
if [ -n "${MEGA_EMAIL}" ] && [ -n "${MEGA_PASSWORD}" ]; then
cat << EOF
=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

              BACKAROSA MEGA BACKUP

=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
EOF
  duplicati-cli find "mega://${MEGA_DIR}" --auth-username="${MEGA_EMAIL}" --auth-password="${MEGA_PASSWORD}" --no-encryption="true" --number-of-retries=1 > /dev/null 2>&1 # check if mega folder exists
  if [ $? -eq 0 ]; then
    duplicati-cli repair "mega://${MEGA_DIR}" --auth-username="${MEGA_EMAIL}" --auth-password="${MEGA_PASSWORD}" --no-encryption="true" --number-of-retries=1
  fi
  if [ "${SAFE_BACKUP}" == "true" ]; then
    container_stop
    duplicati-cli backup "mega://${MEGA_DIR}" "${BACKAROSA_SOURCE}" --auth-username="${MEGA_EMAIL}" --auth-password="${MEGA_PASSWORD}" --no-encryption="true" --keep-versions="${KEEP_VERSIONS}"
  else
    duplicati-cli backup "mega://${MEGA_DIR}" "${BACKAROSA_SOURCE}" --auth-username="${MEGA_EMAIL}" --auth-password="${MEGA_PASSWORD}" --no-encryption="true" --keep-versions="${KEEP_VERSIONS}"
  fi
fi
#==========================================================
#================== END OF MEGA SECTION ===================
#==========================================================

#==========================================================
# ====================== LOCAL SECTION ====================
#==========================================================
if [ "${LOCAL_BACKUP}" == "true" ]; then
cat << EOF
=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

              BACKAROSA LOCAL BACKUP

=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
EOF
  duplicati-cli find "file://${BACKAROSA_BACKUP}" --no-encryption="true" --number-of-retries=1 > /dev/null 2>&1 # check if mega folder exists
  if [ $? -eq 0 ]; then
    duplicati-cli repair "file://${BACKAROSA_BACKUP}" --no-encryption="true" --number-of-retries=1
  fi
  if [ "${SAFE_BACKUP}" == "true" ]; then
    container_stop
    duplicati-cli backup "file://${BACKAROSA_BACKUP}" "${BACKAROSA_SOURCE}" --no-encryption="true" --keep-versions="${KEEP_VERSIONS}"
  else
    duplicati-cli backup "file://${BACKAROSA_BACKUP}" "${BACKAROSA_SOURCE}" --no-encryption="true" --keep-versions="${KEEP_VERSIONS}"
  fi
fi
#==========================================================
# ================== END OF LOCAL SECTION =================
#==========================================================

#==========================================================
# ====================== GDRIVE SECTION ===================
#==========================================================
if [ -n "${GDRIVE_AUTHID}" ]; then
cat << EOF
=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

              BACKAROSA GDRIVE BACKUP

=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
EOF
  duplicati-cli find "googledrive://${GDRIVE_DIR}" --authid="${GDRIVE_AUTHID}" --no-encryption="true" --number-of-retries=1 > /dev/null 2>&1 # check if mega folder exists
  if [ $? -eq 0 ]; then
    duplicati-cli repair "googledrive://${GDRIVE_DIR}" --authid="${GDRIVE_AUTHID}" --no-encryption="true" --number-of-retries=1
  fi
  if [ "${SAFE_BACKUP}" == "true" ]; then
    container_stop
    duplicati-cli backup "googledrive://${GDRIVE_DIR}" "${BACKAROSA_SOURCE}" --authid="${GDRIVE_AUTHID}" --no-encryption="true" --keep-versions="${KEEP_VERSIONS}"
  else
    duplicati-cli backup "googledrive://${GDRIVE_DIR}" "${BACKAROSA_SOURCE}" --authid="${GDRIVE_AUTHID}" --no-encryption="true" --keep-versions="${KEEP_VERSIONS}"
  fi
fi
#==========================================================
# ================== END OF GDRIVE SECTION ================
#==========================================================

#==========================================================
# ====================== DROPBOX SECTION ==================
#==========================================================
if [ -n "${DROPBOX_AUTHID}" ]; then
cat << EOF
=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

              BACKAROSA DROPBOX BACKUP

=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
EOF
  duplicati-cli find "dropbox://${DROPBOX_DIR}" --authid="${DROPBOX_AUTHID}" --no-encryption="true" --number-of-retries=1 > /dev/null 2>&1 # check if mega folder exists
  if [ $? -eq 0 ]; then
    duplicati-cli repair "dropbox://${DROPBOX_DIR}" --authid="${DROPBOX_AUTHID}" --no-encryption="true" --number-of-retries=1
  fi
  if [ "${SAFE_BACKUP}" == "true" ]; then
    container_stop
    duplicati-cli backup "dropbox://${DROPBOX_DIR}" "${BACKAROSA_SOURCE}" --authid="${DROPBOX_AUTHID}" --no-encryption="true" --keep-versions="${KEEP_VERSIONS}"
  else
    duplicati-cli backup "dropbox://${DROPBOX_DIR}" "${BACKAROSA_SOURCE}" --authid="${DROPBOX_AUTHID}" --no-encryption="true" --keep-versions="${KEEP_VERSIONS}"
  fi
fi
#==========================================================
# ================== END OF DROPBOX SECTION ===============
#==========================================================










container_start
#==========================================================
#======================= CRON SECTION =====================
#==========================================================
cron_exist=$(cat /etc/crontab 2>/dev/null | grep "root" | awk -F" root" '{print $1}')
  if [ -n "${CRON}" ] && [ "$cron_exist" != "${CRON}" ]; then
    rm /etc/crontab
    # > /proc/1/fd/1 2> /proc/1/fd/2 redirect output to docker logs when working inside container
    echo -e "${CRON} root /opt/backarosa/backup > /proc/1/fd/1 2> /proc/1/fd/2 \n" >> /etc/crontab
    cron -f -L 2 # -f run cron in foreground and 2 after cron job , meaning the container will keep running even if cron job fails
  fi
exit 0
#==========================================================
#=================== END OF CRON SECTION ==================
#==========================================================